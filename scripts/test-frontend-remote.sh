#!/bin/bash

# Remote Frontend Testing Script for RDP Relay
# Test the deployed system on the remote server

# Configuration
REMOTE_SERVER="159.89.112.134"
REMOTE_URL="http://$REMOTE_SERVER:8080"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_step() {
    echo -e "\n${BLUE}==>${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_test() {
    echo -e "${YELLOW}üß™ TEST:${NC} $1"
}

echo "üåê RDP Relay Remote Frontend Testing"
echo "====================================="
echo "Remote Server: $REMOTE_SERVER"
echo "Portal URL: $REMOTE_URL"
echo ""

# Test 1: Check if remote server is accessible
print_step "Testing Remote Server Connectivity"

if ping -c 1 -W 5000 $REMOTE_SERVER >/dev/null 2>&1; then
    print_success "Server $REMOTE_SERVER is reachable"
else
    echo "‚ùå Server $REMOTE_SERVER is not reachable"
    exit 1
fi

# Test 2: Check if web portal is accessible
print_step "Testing Web Portal Accessibility"

if curl -s --connect-timeout 10 "$REMOTE_URL" >/dev/null; then
    print_success "Web portal is accessible at $REMOTE_URL"
else
    echo "‚ö†Ô∏è  Web portal may not be ready yet. Deployment might still be in progress."
    echo "   Please wait for deployment to complete and try again."
fi

# Test 3: Check API health
print_step "Testing API Health"

API_HEALTH=$(curl -s --connect-timeout 10 "$REMOTE_URL/api/health" 2>/dev/null)
if [[ -n "$API_HEALTH" ]]; then
    print_success "API is responding"
    echo "   API Response: $API_HEALTH"
else
    echo "‚ö†Ô∏è  API may not be ready yet"
fi

# Open browser for manual testing
print_step "Opening Remote Portal for Testing"

echo "Opening remote portal..."
if command -v open >/dev/null; then
    open $REMOTE_URL
elif command -v xdg-open >/dev/null; then
    xdg-open $REMOTE_URL
else
    echo "Please open $REMOTE_URL in your browser"
fi

echo ""
echo "üéØ REMOTE FRONTEND TESTING CHECKLIST"
echo "====================================="

print_test "1. ACCESS REMOTE PORTAL"
echo "   ‚Ä¢ URL: $REMOTE_URL"
echo "   ‚Ä¢ Expected: Portal loads without errors"
echo "   ‚Ä¢ Expected: Login page appears"
echo ""

print_test "2. LOGIN TO REMOTE SYSTEM"
echo "   ‚Ä¢ Email: admin@rdprelay.local"
echo "   ‚Ä¢ Password: admin123"
echo "   ‚Ä¢ Expected: Successful authentication"
echo "   ‚Ä¢ Expected: Dashboard loads"
echo ""

print_test "3. TEST GENERATE TOKEN (Remote)"
echo "   ‚Ä¢ Navigate to 'Agents' page"
echo "   ‚Ä¢ Click 'Generate Token'"
echo "   ‚Ä¢ Expected: Token generated successfully"
echo "   ‚Ä¢ Expected: No HTTP 415 errors"
echo ""

print_test "4. TEST ADD AGENT (Remote)"
echo "   ‚Ä¢ Click 'Add Agent' button"
echo "   ‚Ä¢ Fill form with:"
echo "     Agent Name: 'Remote Test Agent'"
echo "     Machine ID: 'REMOTE-TEST-$(date +%s)'"
echo "     Machine Name: 'Remote Desktop'"
echo "     IP Address: '10.0.0.100'"
echo "   ‚Ä¢ Click 'Create'"
echo "   ‚Ä¢ Expected: Agent created successfully"
echo ""

print_test "5. NETWORK PERFORMANCE"
echo "   ‚Ä¢ Test page load speeds"
echo "   ‚Ä¢ Test API response times"
echo "   ‚Ä¢ Expected: Reasonable performance over internet"
echo ""

print_test "6. CROSS-BROWSER TESTING"
echo "   ‚Ä¢ Test in multiple browsers"
echo "   ‚Ä¢ Test from different devices"
echo "   ‚Ä¢ Expected: Consistent functionality"
echo ""

echo ""
echo "üåç REMOTE vs LOCAL COMPARISON"
echo "=============================="
echo "Both systems should have identical functionality:"
echo "‚Ä¢ Local:  http://localhost:8080"
echo "‚Ä¢ Remote: $REMOTE_URL"
echo ""
echo "Key differences:"
echo "‚Ä¢ Remote: Accessible from anywhere"
echo "‚Ä¢ Remote: Real production environment"
echo "‚Ä¢ Remote: Network latency considerations"
echo "‚Ä¢ Local:  Faster response times"
echo "‚Ä¢ Local:  Full debugging access"
echo ""

echo "üìä TESTING ENDPOINTS"
echo "===================="
echo "‚Ä¢ Portal:     $REMOTE_URL"
echo "‚Ä¢ API Health: $REMOTE_URL/api/health"
echo "‚Ä¢ API Docs:   http://$REMOTE_SERVER:5000/swagger"
echo "‚Ä¢ Direct Web: http://$REMOTE_SERVER:3000"
echo ""

echo "üîë PROVISIONING TOKEN TESTING"
echo "=============================="
echo "After generating a token in the web portal:"
echo "1. Copy the provisioning token"
echo "2. Use it to configure a Windows agent"
echo "3. Verify agent appears in portal as 'Online'"
echo "4. Test RDP session creation"
echo ""

echo "üéâ REMOTE TESTING SUCCESS CRITERIA"
echo "=================================="
echo "‚úÖ Remote portal accessible from internet"
echo "‚úÖ All frontend functionality works over WAN"
echo "‚úÖ Generate Token works on remote server"
echo "‚úÖ Add Agent works with remote database"
echo "‚úÖ Performance is acceptable over internet"
echo "‚úÖ Cross-browser compatibility maintained"
echo "‚úÖ Mobile/responsive design works remotely"
echo ""

print_success "Remote frontend testing guide ready!"
echo ""
echo "üí° Next Steps:"
echo "1. Complete deployment on $REMOTE_SERVER"
echo "2. Open $REMOTE_URL in your browser"
echo "3. Follow the testing checklist above"
echo "4. Compare functionality with local version"
echo "5. Test Windows agent connectivity to remote server"
